@page "/examresultspage"
@inject Client ApiClient

<h3>Exam Results Management</h3>

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <p style="color:red;">Error: @_errorMessage</p>
}

<button @onclick="LoadAllExamResults">Get All Exam Results</button>

@if (_examResults != null && _examResults.Any())
{
    <table>
        <thead>
            <tr>
                <th>ID</th>
                <th>Abiturient ID</th>
                <th>Exam Name</th>
                <th>Result</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var examResult in _examResults)
            {
                <tr>
                    <td>@examResult.Id</td>
                    <td>@examResult.Abiturient_id</td>
                    <td>@examResult.Exam_name</td>
                    <td>@examResult.Result</td>
                </tr>
            }
        </tbody>
    </table>
}
else if (_examResults != null && !_examResults.Any())
{
    <p>No exam results found.</p>
}

<hr />

<h4>Find Exam Result by ID</h4>
<input type="number" @bind="_searchId" placeholder="Enter Exam Result ID" />
<button @onclick="LoadExamResultById">Find Exam Result</button>

@if (_foundExamResult != null)
{
    <h5>Exam Result Details</h5>
    <p><strong>ID:</strong> @_foundExamResult.Id</p>
    <p><strong>Abiturient ID:</strong> @_foundExamResult.Abiturient_id</p>
    <p><strong>Exam Name:</strong> @_foundExamResult.Exam_name</p>
    <p><strong>Result:</strong> @_foundExamResult.Result</p>
}

<hr />

<h4>Add New Exam Result</h4>
<div>
    <label>Abiturient ID:</label>
    <input type="number" @bind="_newExamResult.Abiturient_id" placeholder="Enter Abiturient ID" />
    <br />
    <label>Exam Name:</label>
    <input type="text" @bind="_newExamResult.Exam_name" placeholder="Enter Exam Name" />
    <br />
    <label>Result:</label>
    <input type="number" @bind="_newExamResult.Result" placeholder="Enter Result (0-100)" />
    @if (!string.IsNullOrEmpty(_validationError))
    {
        <p style="color:red;">@_validationError</p>
    }
</div>
<button @onclick="ValidateAndAddExamResult">Add Exam Result</button>

<hr />

<h4>Edit Exam Result</h4>
<div>
    <label>ID:</label>
    <input type="number" @bind="_editId" placeholder="Enter ID to edit" />
    <button @onclick="LoadExamResultForEdit">Load Exam Result</button>
</div>

@if (_editExamResult != null)
{
    <div>
        <label>Abiturient ID:</label>
        <input type="number" @bind="_editExamResult.Abiturient_id" />
        <br />
        <label>Exam Name:</label>
        <input type="text" @bind="_editExamResult.Exam_name" />
        <br />
        <label>Result:</label>
        <input type="number" @bind="_editExamResult.Result" />
    </div>
    <button @onclick="UpdateExamResult">Save Changes</button>
}

<hr />

<h4>Delete Exam Result</h4>
<div>
    <label>ID:</label>
    <input type="number" @bind="_deleteId" placeholder="Enter ID to delete" />
    <button @onclick="DeleteExamResult">Delete Exam Result</button>
</div>

@code {
    private IEnumerable<ExamResultDto>? _examResults;
    private ExamResultDto? _foundExamResult;
    private ExamResultCreateDto _newExamResult = new ExamResultCreateDto();
    private ExamResultCreateDto? _editExamResult;
    private int _editId;
    private int _searchId;
    private int _deleteId;
    private string? _errorMessage;
    private string? _validationError;

    private async Task LoadAllExamResults()
    {
        try
        {
            _examResults = await ApiClient.ExamResultAllAsync();
            _errorMessage = null;
        }
        catch (ApiException ex)
        {
            _errorMessage = $"Failed to load exam results: {ex.Message}";
            _examResults = null;
        }
        catch (Exception ex)
        {
            _errorMessage = $"Unknown error: {ex.Message}";
        }
    }

    private async Task LoadExamResultById()
    {
        try
        {
            _foundExamResult = await ApiClient.ExamResultGETAsync(_searchId);
            _errorMessage = null;
        }
        catch (ApiException ex)
        {
            _errorMessage = $"Failed to find exam result: {ex.Message}";
            _foundExamResult = null;
        }
        catch (Exception ex)
        {
            _errorMessage = $"Unknown error: {ex.Message}";
        }
    }

    private async Task ValidateAndAddExamResult()
    {
        if (_newExamResult.Abiturient_id <= 0 || string.IsNullOrWhiteSpace(_newExamResult.Exam_name) ||
            _newExamResult.Result < 0 || _newExamResult.Result > 100)
        {
            _validationError = "All fields are required. Result must be between 0 and 100.";
        }
        else
        {
            _validationError = null;
            await AddExamResult();
        }
    }

    private async Task AddExamResult()
    {
        try
        {
            await ApiClient.ExamResultPOSTAsync(_newExamResult);
            _errorMessage = "Exam result added successfully.";
            _newExamResult = new ExamResultCreateDto();
        }
        catch (ApiException ex)
        {
            _errorMessage = $"Failed to add exam result: {ex.Message}";
        }
        catch (Exception ex)
        {
            _errorMessage = $"Unknown error: {ex.Message}";
        }
    }

    private async Task LoadExamResultForEdit()
    {
        try
        {
            var examResult = await ApiClient.ExamResultGETAsync(_editId);
            _editExamResult = new ExamResultCreateDto
                {
                    Abiturient_id = examResult.Abiturient_id,
                    Exam_name = examResult.Exam_name,
                    Result = examResult.Result
                };
            _errorMessage = null;
        }
        catch (ApiException ex)
        {
            _errorMessage = $"Failed to load exam result with ID {_editId}: {ex.Message}";
            _editExamResult = null;
        }
        catch (Exception ex)
        {
            _errorMessage = $"Unknown error: {ex.Message}";
            _editExamResult = null;
        }
    }

    private async Task UpdateExamResult()
    {
        try
        {
            await ApiClient.ExamResultPUTAsync(_editId, _editExamResult);
            _errorMessage = "Exam result updated successfully.";
            _editExamResult = null;
        }
        catch (ApiException ex)
        {
            _errorMessage = $"Failed to update exam result with ID {_editId}: {ex.Message}";
        }
        catch (Exception ex)
        {
            _errorMessage = $"Unknown error: {ex.Message}";
        }
    }

    private async Task DeleteExamResult()
    {
        try
        {
            await ApiClient.ExamResultDELETEAsync(_deleteId);
            _errorMessage = "Exam result deleted successfully.";
        }
        catch (ApiException ex)
        {
            _errorMessage = $"Failed to delete exam result with ID {_deleteId}: {ex.Message}";
        }
        catch (Exception ex)
        {
            _errorMessage = $"Unknown error: {ex.Message}";
        }
    }
}
