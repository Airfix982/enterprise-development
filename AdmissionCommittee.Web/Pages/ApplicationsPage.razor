@page "/applicationspage"
@inject Client ApiClient

<h3>Applications Management</h3>

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <p style="color:red;">Error: @_errorMessage</p>
}

<button @onclick="LoadAllApplications">Get All Applications</button>

@if (_applications != null && _applications.Any())
{
    <table>
        <thead>
            <tr>
                <th>ID</th>
                <th>Speciality ID</th>
                <th>Abiturient ID</th>
                <th>Priority</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var application in _applications)
            {
                <tr>
                    <td>@application.Id</td>
                    <td>@application.Speciality_id</td>
                    <td>@application.Abiturient_id</td>
                    <td>@application.Priority</td>
                </tr>
            }
        </tbody>
    </table>
}
else if (_applications != null && !_applications.Any())
{
    <p>No applications found.</p>
}

<hr />

<h4>Find Application by ID</h4>
<input type="number" @bind="_searchId" placeholder="Enter Application ID" />
<button @onclick="LoadApplicationById">Find Application</button>

@if (_foundApplication != null)
{
    <h5>Application Details</h5>
    <p><strong>ID:</strong> @_foundApplication.Id</p>
    <p><strong>Speciality ID:</strong> @_foundApplication.Speciality_id</p>
    <p><strong>Abiturient ID:</strong> @_foundApplication.Abiturient_id</p>
    <p><strong>Priority:</strong> @_foundApplication.Priority</p>
}

<hr />

<h4>Add New Application</h4>
<div>
    <label>Speciality ID:</label>
    <input type="number" @bind="_newApplication.Speciality_id" placeholder="Enter Speciality ID" />
    <br />
    <label>Abiturient ID:</label>
    <input type="number" @bind="_newApplication.Abiturient_id" placeholder="Enter Abiturient ID" />
    <br />
    <label>Priority:</label>
    <input type="number" @bind="_newApplication.Priority" placeholder="Enter Priority (1-3)" />
    @if (!string.IsNullOrEmpty(_validationError))
    {
        <p style="color:red;">@_validationError</p>
    }
</div>
<button @onclick="ValidateAndAddApplication">Add Application</button>

<hr />

<h4>Edit Application</h4>
<div>
    <label>ID:</label>
    <input type="number" @bind="_editId" placeholder="Enter ID to edit" />
    <button @onclick="LoadApplicationForEdit">Load Application</button>
</div>

@if (_editApplication != null)
{
    <div>
        <label>Speciality ID:</label>
        <input type="number" @bind="_editApplication.Speciality_id" />
        <br />
        <label>Abiturient ID:</label>
        <input type="number" @bind="_editApplication.Abiturient_id" />
        <br />
        <label>Priority:</label>
        <input type="number" @bind="_editApplication.Priority" />
    </div>
    <button @onclick="UpdateApplication">Save Changes</button>
}

<hr />

<h4>Delete Application</h4>
<div>
    <label>ID:</label>
    <input type="number" @bind="_deleteId" placeholder="Enter ID to delete" />
    <button @onclick="DeleteApplication">Delete Application</button>
</div>

@code {
    private IEnumerable<ApplicationDto>? _applications;
    private ApplicationDto? _foundApplication;
    private ApplicationCreateDto _newApplication = new ApplicationCreateDto();
    private ApplicationCreateDto? _editApplication;
    private int _editId;
    private int _searchId;
    private int _deleteId;
    private string? _errorMessage;
    private string? _validationError;

    private async Task LoadAllApplications()
    {
        try
        {
            _applications = await ApiClient.ApplicationAllAsync();
            _errorMessage = null;
        }
        catch (ApiException ex)
        {
            _errorMessage = $"Failed to load applications: {ex.Message}";
            _applications = null;
        }
        catch (Exception ex)
        {
            _errorMessage = $"Unknown error: {ex.Message}";
        }
    }

    private async Task LoadApplicationById()
    {
        try
        {
            _foundApplication = await ApiClient.ApplicationGETAsync(_searchId);
            _errorMessage = null;
        }
        catch (ApiException ex)
        {
            _errorMessage = $"Failed to find application: {ex.Message}";
            _foundApplication = null;
        }
        catch (Exception ex)
        {
            _errorMessage = $"Unknown error: {ex.Message}";
        }
    }

    private async Task ValidateAndAddApplication()
    {
        if (_newApplication.Speciality_id <= 0 || _newApplication.Abiturient_id <= 0 || _newApplication.Priority <= 0)
        {
            _validationError = "All fields are required and must be greater than 0.";
        }
        else
        {
            _validationError = null;
            await AddApplication();
        }
    }

    private async Task AddApplication()
    {
        try
        {
            await ApiClient.ApplicationPOSTAsync(_newApplication);
            _errorMessage = "Application added successfully.";
            _newApplication = new ApplicationCreateDto();
        }
        catch (ApiException ex)
        {
            _errorMessage = $"Failed to add application: {ex.Message}";
        }
        catch (Exception ex)
        {
            _errorMessage = $"Unknown error: {ex.Message}";
        }
    }

    private async Task LoadApplicationForEdit()
    {
        try
        {
            var application = await ApiClient.ApplicationGETAsync(_editId);
            _editApplication = new ApplicationCreateDto
                {
                    Speciality_id = application.Speciality_id,
                    Abiturient_id = application.Abiturient_id,
                    Priority = application.Priority
                };
            _errorMessage = null;
        }
        catch (ApiException ex)
        {
            _errorMessage = $"Failed to load application with ID {_editId}: {ex.Message}";
            _editApplication = null;
        }
        catch (Exception ex)
        {
            _errorMessage = $"Unknown error: {ex.Message}";
            _editApplication = null;
        }
    }

    private async Task UpdateApplication()
    {
        try
        {
            await ApiClient.ApplicationPUTAsync(_editId, _editApplication);
            _errorMessage = "Application updated successfully.";
            _editApplication = null;
        }
        catch (ApiException ex)
        {
            _errorMessage = $"Failed to update application with ID {_editId}: {ex.Message}";
        }
        catch (Exception ex)
        {
            _errorMessage = $"Unknown error: {ex.Message}";
        }
    }

    private async Task DeleteApplication()
    {
        try
        {
            await ApiClient.ApplicationDELETEAsync(_deleteId);
            _errorMessage = "Application deleted successfully.";
        }
        catch (ApiException ex)
        {
            _errorMessage = $"Failed to delete application with ID {_deleteId}: {ex.Message}";
        }
        catch (Exception ex)
        {
            _errorMessage = $"Unknown error: {ex.Message}";
        }
    }
}
