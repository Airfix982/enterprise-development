@page "/specialitiespage"
@inject Client ApiClient

<h3>Specialities Management</h3>

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <p style="color:red;">Error: @_errorMessage</p>
}

<button @onclick="LoadAllSpecialities">Get All Specialities</button>

@if (_specialities != null && _specialities.Any())
{
    <table>
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Number</th>
                <th>Facility</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var speciality in _specialities)
            {
                <tr>
                    <td>@speciality.Id</td>
                    <td>@speciality.Name</td>
                    <td>@speciality.Number</td>
                    <td>@speciality.Facility</td>
                </tr>
            }
        </tbody>
    </table>
}
else if (_specialities != null && !_specialities.Any())
{
    <p>No specialities found.</p>
}

<hr />

<h4>Find Speciality by ID</h4>
<input type="number" @bind="_searchId" placeholder="Enter Speciality ID" />
<button @onclick="LoadSpecialityById">Find Speciality</button>

@if (_foundSpeciality != null)
{
    <h5>Speciality Details</h5>
    <p><strong>ID:</strong> @_foundSpeciality.Id</p>
    <p><strong>Name:</strong> @_foundSpeciality.Name</p>
    <p><strong>Number:</strong> @_foundSpeciality.Number</p>
    <p><strong>Facility:</strong> @_foundSpeciality.Facility</p>
}

<hr />

<h4>Add New Speciality</h4>
<div>
    <label>Name:</label>
    <input type="text" @bind="_newSpeciality.Name" placeholder="Enter Name" />
    <br />
    <label>Number:</label>
    <input type="text" @bind="_newSpeciality.Number" placeholder="Enter Number" />
    <br />
    <label>Facility:</label>
    <input type="text" @bind="_newSpeciality.Facility" placeholder="Enter Facility" />
    @if (!string.IsNullOrEmpty(_validationError))
    {
        <p style="color:red;">@_validationError</p>
    }
</div>
<button @onclick="ValidateAndAddSpeciality">Add Speciality</button>

<hr />

<h4>Edit Speciality</h4>
<div>
    <label>ID:</label>
    <input type="number" @bind="_editId" placeholder="Enter ID to edit" />
    <button @onclick="LoadSpecialityForEdit">Load Speciality</button>
</div>

@if (_editSpeciality != null)
{
    <div>
        <label>Name:</label>
        <input type="text" @bind="_editSpeciality.Name" />
        <br />
        <label>Number:</label>
        <input type="text" @bind="_editSpeciality.Number" />
        <br />
        <label>Facility:</label>
        <input type="text" @bind="_editSpeciality.Facility" />
    </div>
    <button @onclick="UpdateSpeciality">Save Changes</button>
}

<hr />

<h4>Delete Speciality</h4>
<div>
    <label>ID:</label>
    <input type="number" @bind="_deleteId" placeholder="Enter ID to delete" />
    <button @onclick="DeleteSpeciality">Delete Speciality</button>
</div>

@code {
    private IEnumerable<SpecialityDto>? _specialities;
    private SpecialityDto? _foundSpeciality;
    private SpecialityCreateDto _newSpeciality = new SpecialityCreateDto();
    private SpecialityCreateDto? _editSpeciality;
    private int _editId;
    private int _searchId;
    private int _deleteId;
    private string? _errorMessage;
    private string? _validationError;

    private async Task LoadAllSpecialities()
    {
        try
        {
            _specialities = await ApiClient.SpecialityAllAsync();
            _errorMessage = null;
        }
        catch (ApiException ex)
        {
            _errorMessage = $"Failed to load specialities: {ex.Message}";
            _specialities = null;
        }
        catch (Exception ex)
        {
            _errorMessage = $"Unknown error: {ex.Message}";
        }
    }

    private async Task LoadSpecialityById()
    {
        try
        {
            _foundSpeciality = await ApiClient.SpecialityGETAsync(_searchId);
            _errorMessage = null;
        }
        catch (ApiException ex)
        {
            _errorMessage = $"Failed to find speciality: {ex.Message}";
            _foundSpeciality = null;
        }
        catch (Exception ex)
        {
            _errorMessage = $"Unknown error: {ex.Message}";
        }
    }

    private async Task ValidateAndAddSpeciality()
    {
        if (string.IsNullOrWhiteSpace(_newSpeciality.Name) ||
            string.IsNullOrWhiteSpace(_newSpeciality.Number) ||
            string.IsNullOrWhiteSpace(_newSpeciality.Facility))
        {
            _validationError = "All fields are required.";
        }
        else
        {
            _validationError = null;
            await AddSpeciality();
        }
    }

    private async Task AddSpeciality()
    {
        try
        {
            await ApiClient.SpecialityPOSTAsync(_newSpeciality);
            _errorMessage = "Speciality added successfully.";
            _newSpeciality = new SpecialityCreateDto();
        }
        catch (ApiException ex)
        {
            _errorMessage = $"Failed to add speciality: {ex.Message}";
        }
        catch (Exception ex)
        {
            _errorMessage = $"Unknown error: {ex.Message}";
        }
    }

    private async Task LoadSpecialityForEdit()
    {
        try
        {
            var speciality = await ApiClient.SpecialityGETAsync(_editId);
            _editSpeciality = new SpecialityCreateDto
                {
                    Name = speciality.Name,
                    Number = speciality.Number,
                    Facility = speciality.Facility
                };
            _errorMessage = null;
        }
        catch (ApiException ex)
        {
            _errorMessage = $"Failed to load speciality with ID {_editId}: {ex.Message}";
            _editSpeciality = null;
        }
        catch (Exception ex)
        {
            _errorMessage = $"Unknown error: {ex.Message}";
            _editSpeciality = null;
        }
    }

    private async Task UpdateSpeciality()
    {
        try
        {
            await ApiClient.SpecialityPUTAsync(_editId, _editSpeciality);
            _errorMessage = "Speciality updated successfully.";
            _editSpeciality = null;
        }
        catch (ApiException ex)
        {
            _errorMessage = $"Failed to update speciality with ID {_editId}: {ex.Message}";
        }
        catch (Exception ex)
        {
            _errorMessage = $"Unknown error: {ex.Message}";
        }
    }

    private async Task DeleteSpeciality()
    {
        try
        {
            await ApiClient.SpecialityDELETEAsync(_deleteId);
            _errorMessage = "Speciality deleted successfully.";
        }
        catch (ApiException ex)
        {
            _errorMessage = $"Failed to delete speciality with ID {_deleteId}: {ex.Message}";
        }
        catch (Exception ex)
        {
            _errorMessage = $"Unknown error: {ex.Message}";
        }
    }
}
