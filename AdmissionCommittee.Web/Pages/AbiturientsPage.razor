@page "/abiturientspage"
@inject Client ApiClient

<h3>Abiturient Management</h3>

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <p style="color:red;">Error: @_errorMessage</p>
}

<button @onclick="LoadAllAbiturients">Get All Abiturients</button>

@if (_abiturients != null && _abiturients.Any())
{
    <table>
        <thead>
            <tr>
                <th>ID</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Birthday Date</th>
                <th>Country</th>
                <th>City</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var abiturient in _abiturients)
            {
                <tr>
                    <td>@abiturient.Id</td>
                    <td>@abiturient.Name</td>
                    <td>@abiturient.Last_name</td>
                    <td>@abiturient.Birthday_date</td>
                    <td>@abiturient.Country</td>
                    <td>@abiturient.City</td>
                </tr>
            }
        </tbody>
    </table>
}
else if (_abiturients != null && !_abiturients.Any())
{
    <p>No abiturients found.</p>
}

<hr />

<h4>Find Abiturient by ID</h4>
<input type="number" @bind="_searchId" placeholder="Enter Abiturient ID" />
<button @onclick="LoadAbiturientById">Find Abiturient</button>

@if (_foundAbiturient != null)
{
    <h5>Abiturient Details</h5>
    <p><strong>ID:</strong> @_foundAbiturient.Id</p>
    <p><strong>First Name:</strong> @_foundAbiturient.Name</p>
    <p><strong>Last Name:</strong> @_foundAbiturient.Last_name</p>
    <p><strong>Birthday Date:</strong> @_foundAbiturient.Birthday_date</p>
    <p><strong>Country:</strong> @_foundAbiturient.Country</p>
    <p><strong>City:</strong> @_foundAbiturient.City</p>
}

<hr />

<h4>Add New Abiturient</h4>
<div>
    <label>First Name:</label>
    <input type="text" @bind="_newAbiturient.Name" placeholder="Enter First Name" />
    <br />
    <label>Last Name:</label>
    <input type="text" @bind="_newAbiturient.Last_name" placeholder="Enter Last Name" />
    <br />
    <label>Birthday Date:</label>
    <input type="date" @bind="_newAbiturient.Birthday_date" />
    <br />
    <label>Country:</label>
    <input type="text" @bind="_newAbiturient.Country" placeholder="Enter Country" />
    <br />
    <label>City:</label>
    <input type="text" @bind="_newAbiturient.City" placeholder="Enter City" />
    @if (!string.IsNullOrEmpty(_validationError))
    {
        <p style="color: red;">@_validationError</p>
    }
</div>
<button @onclick="ValidateAndAddAbiturient">Add Abiturient</button>

<hr />

<h4>Edit Abiturient</h4>
<div>
    <label>ID:</label>
    <input type="number" @bind="_editId" placeholder="Enter ID to edit" />
    <button @onclick="LoadAbiturientForEdit">Load Abiturient</button>
</div>

@if (_editAbiturient != null)
{
    <div>
        <label>First Name:</label>
        <input type="text" @bind="_editAbiturient.Name" />
        <br />
        <label>Last Name:</label>
        <input type="text" @bind="_editAbiturient.Last_name" />
        <br />
        <label>Birthday Date:</label>
        <input type="date" @bind="_editAbiturient.Birthday_date" />
        <br />
        <label>Country:</label>
        <input type="text" @bind="_editAbiturient.Country" />
        <br />
        <label>City:</label>
        <input type="text" @bind="_editAbiturient.City" />
    </div>
    <button @onclick="UpdateAbiturient">Save Changes</button>
}

<hr />

<h4>Delete Abiturient</h4>
<div>
    <label>ID:</label>
    <input type="number" @bind="_deleteId" placeholder="Enter ID to delete" />
    <button @onclick="DeleteAbiturient">Delete Abiturient</button>
</div>

<hr />

<h4>Get Abiturients by City</h4>
<input type="text" @bind="_cityName" placeholder="Enter City Name" />
<button @onclick="ValidateAndLoadAbiturientsByCity">Get Abiturients By City</button>
@if (!string.IsNullOrWhiteSpace(_cityValidationError))
{
    <p style="color: red;">@_cityValidationError</p>
}

@if (_abiturientsCity != null && _abiturientsCity.Any())
{
    <table>
        <thead>
            <tr>
                <th>ID</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Birthday Date</th>
                <th>Country</th>
                <th>City</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var abiturient in _abiturientsCity)
            {
                <tr>
                    <td>@abiturient.Id</td>
                    <td>@abiturient.Name</td>
                    <td>@abiturient.Last_name</td>
                    <td>@abiturient.Birthday_date</td>
                    <td>@abiturient.Country</td>
                    <td>@abiturient.City</td>
                </tr>
            }
        </tbody>
    </table>
}
else if (_abiturientsCity != null && !_abiturientsCity.Any())
{
    <p>No abiturients found.</p>
}

<hr />

<h4>Get Abiturients by Age</h4>
<input type="number" @bind="_minAge" placeholder="Enter Minimum Age" />
<button @onclick="LoadAbiturientsByAge">Get Abiturients Older Than</button>

@if (_abiturientsByAge != null && _abiturientsByAge.Any())
{
    <table>
        <thead>
            <tr>
                <th>ID</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Birthday Date</th>
                <th>Country</th>
                <th>City</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var abiturient in _abiturientsByAge)
            {
                <tr>
                    <td>@abiturient.Id</td>
                    <td>@abiturient.Name</td>
                    <td>@abiturient.Last_name</td>
                    <td>@abiturient.Birthday_date</td>
                    <td>@abiturient.Country</td>
                    <td>@abiturient.City</td>
                </tr>
            }
        </tbody>
    </table>
}

<hr />

<h4>Get Top-Rated Abiturients</h4>
<input type="number" @bind="_topCount" placeholder="Enter Number of Top Abiturients" />
<button @onclick="LoadTopRatedAbiturients">Get Top-Rated Abiturients</button>

@if (_topRatedAbiturients != null && _topRatedAbiturients.Any())
{
    <table>
        <thead>
            <tr>
                <th>ID</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Birthday Date</th>
                <th>Country</th>
                <th>City</th>
                <th>Exam Score</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var abiturient in _topRatedAbiturients)
            {
                <tr>
                    <td>@abiturient.Abiturient.Id</td>
                    <td>@abiturient.Abiturient.Name</td>
                    <td>@abiturient.Abiturient.LastName</td>
                    <td>@abiturient.Abiturient.BirthdayDate</td>
                    <td>@abiturient.Abiturient.Country</td>
                    <td>@abiturient.Abiturient.City</td>
                    <td>@abiturient.ResultsSum</td>
                </tr>
            }
        </tbody>
    </table>
}

<hr />

<h4>Get Max-Rated Abiturients with Favorite Specialities</h4>
<button @onclick="LoadMaxRatedAbiturientsWithFavoriteSpecialities">Get Max-Rated Abiturients</button>

@if (_maxRatedAbiturients != null && _maxRatedAbiturients.Any())
{
    <table>
        <thead>
            <tr>
                <th>ID</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Birthday Date</th>
                <th>Country</th>
                <th>City</th>
                <th>Favorite Speciality Id</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var abiturient in _maxRatedAbiturients)
            {
                <tr>
                    <td>@abiturient.Abiturient.Id</td>
                    <td>@abiturient.Abiturient.Name</td>
                    <td>@abiturient.Abiturient.LastName</td>
                    <td>@abiturient.Abiturient.BirthdayDate</td>
                    <td>@abiturient.Abiturient.Country</td>
                    <td>@abiturient.Abiturient.City</td>
                    <td>@abiturient.FavoriteSpecialityId</td>
                </tr>
            }
        </tbody>
    </table>
}

<hr />

<h4>Get Abiturients by Speciality</h4>
<input type="number" @bind="_specialityId" placeholder="Enter Speciality ID" />
<button @onclick="LoadAbiturientsBySpeciality">Get Abiturients by Speciality</button>

@if (_abiturientsBySpeciality != null && _abiturientsBySpeciality.Any())
{
    <table>
        <thead>
            <tr>
                <th>ID</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Birthday Date</th>
                <th>Country</th>
                <th>City</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var abiturient in _abiturientsBySpeciality)
            {
                <tr>
                    <td>@abiturient.Id</td>
                    <td>@abiturient.Name</td>
                    <td>@abiturient.Last_name</td>
                    <td>@abiturient.Birthday_date</td>
                    <td>@abiturient.Country</td>
                    <td>@abiturient.City</td>
                </tr>
            }
        </tbody>
    </table>
}

<hr />

<h4>Get First-Priority Speciality Count</h4>
<button @onclick="LoadFirstPrioritySpecialityCount">Get Speciality Count as First Priority</button>

@if (_firstPrioritySpecialityCounts != null && _firstPrioritySpecialityCounts.Any())
{
    <table>
        <thead>
            <tr>
                <th>Speciality ID</th>
                <th>Abiturient Count</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var count in _firstPrioritySpecialityCounts)
            {
                <tr>
                    <td>@count.SpecialityId</td>
                    <td>@count.AbiturientsCount</td>
                </tr>
            }
        </tbody>
    </table>
}



@code {
    private IEnumerable<AbiturientDto>? _abiturients;
    private AbiturientDto? _foundAbiturient;
    private IEnumerable<AbiturientDto>? _abiturientsCity;
    private AbiturientCreateDto _newAbiturient = new AbiturientCreateDto();
    private AbiturientCreateDto? _editAbiturient;
    private IEnumerable<AbiturientDto>? _abiturientsByAge;
    private IEnumerable<AbiturientWithExamScoresDto>? _topRatedAbiturients;
    private IEnumerable<AbiturientDto>? _abiturientsBySpeciality;
    private IEnumerable<SpecialitiesCountAsFavoriteDto>? _firstPrioritySpecialityCounts;
    private IEnumerable<AbiturientMaxRateDto>? _maxRatedAbiturients;
    private int _editId;
    private int _searchId;
    private string? _cityValidationError;
    private int _deleteId;
    private string? _cityName;
    private int _minAge;
    private int _topCount;
    private string? _validationError;
    private int _specialityId;
    private string? _errorMessage;

    private async Task LoadAllAbiturients()
    {
        try
        {
            _abiturients = await ApiClient.AbiturientAllAsync();
            _errorMessage = null;
        }
        catch (ApiException ex)
        {
            _errorMessage = $"Failed to load _abiturients: {ex.Message}";
            _abiturients = null;
        }
        catch (Exception ex)
        {
            _errorMessage = $"Unknown error: {ex.Message}";
        }
    }

    private async Task LoadAbiturientById()
    {
        try
        {
            _foundAbiturient = await ApiClient.AbiturientGETAsync(_searchId);
            _errorMessage = null;
        }
        catch (ApiException ex)
        {
            _errorMessage = $"{ex.Message}";
            _foundAbiturient = null;
        }
        catch (Exception ex)
        {
            _errorMessage = $"Unknown error: {ex.Message}";
        }
    }
    private async Task ValidateAndAddAbiturient()
    {
        if (string.IsNullOrWhiteSpace(_newAbiturient.Name) ||
            string.IsNullOrWhiteSpace(_newAbiturient.Last_name) ||
            _newAbiturient.Birthday_date == null ||
            string.IsNullOrWhiteSpace(_newAbiturient.Country) ||
            string.IsNullOrWhiteSpace(_newAbiturient.City))
        {
            _validationError = "All fields in this block are required.";
        }
        else
        {
            _validationError = null;
            await AddAbiturient();
        }
    }
    private async Task AddAbiturient()
    {
        try
        {
            await ApiClient.AbiturientPOSTAsync(_newAbiturient);
            _newAbiturient = new AbiturientCreateDto();
        }
        catch (ApiException ex)
        {
            Console.WriteLine(ex);
            _errorMessage = $"Failed to add abiturient: {ex.Message}";
        }
        catch (Exception ex)
        {
            _errorMessage = $"Unknown error: {ex.Message}";
        }
    }

    private async Task LoadAbiturientForEdit()
    {
        try
        {
            var abiturient = await ApiClient.AbiturientGETAsync(_editId);
            _editAbiturient = new AbiturientCreateDto
                {
                    Name = abiturient.Name,
                    Last_name = abiturient.Last_name,
                    Birthday_date = abiturient.Birthday_date,
                    Country = abiturient.Country,
                    City = abiturient.City
                };
            _errorMessage = null;
        }
        catch (ApiException ex)
        {
            _errorMessage = $"Failed to load abiturient with ID {_editId}: {ex.Message}";
            _editAbiturient = null;
        }
        catch (Exception ex)
        {
            _errorMessage = $"Unknown error: {ex.Message}";
            _editAbiturient = null;
        }
    }

    private async Task UpdateAbiturient()
    {
        try
        {
            await ApiClient.AbiturientPUTAsync(_editId, _editAbiturient);
            _errorMessage = "Abiturient updated successfully.";
            _editAbiturient = null;
        }
        catch (ApiException ex)
        {
            _errorMessage = $"Failed to update abiturient with ID {_editId}: {ex.Message}";
        }
        catch (Exception ex)
        {
            _errorMessage = $"Unknown error: {ex.Message}";
        }
    }

    private async Task DeleteAbiturient()
    {
        try
        {
            await ApiClient.AbiturientDELETEAsync(_deleteId);
            _errorMessage = "Abiturient deleted successfully.";
        }
        catch (ApiException ex)
        {
            _errorMessage = $"Failed to delete abiturient with ID {_deleteId}: {ex.Message}";
        }
        catch (Exception ex)
        {
            _errorMessage = $"Unknown error: {ex.Message}";
        }
    }
    private async Task ValidateAndLoadAbiturientsByCity()
    {
        if (string.IsNullOrWhiteSpace(_cityName))
        {
            _cityValidationError = "City Name is required.";
        }
        else
        {
            _cityValidationError = null;
            await LoadAbiturientsByCity();
        }
    }
    private async Task LoadAbiturientsByCity()
    {
        try
        {
            _abiturientsCity = await ApiClient.CityAsync(_cityName);
            _errorMessage = null;
        }
        catch (ApiException ex)
        {
            _errorMessage = $"{ex.Message}";
            _abiturientsCity = null;
        }
        catch (Exception ex)
        {
            _errorMessage = $"Unknown error: {ex.Message}";
            _abiturientsCity = null;
        }
    }

    private async Task LoadAbiturientsByAge()
    {
        try
        {
            _abiturientsByAge = await ApiClient.OlderthanAsync(_minAge);
            _errorMessage = null;
        }
        catch (ApiException ex)
        {
            _errorMessage = $"Failed to load _abiturients older than {_minAge}: {ex.Message}";
            _abiturientsByAge = null;
        }
        catch (Exception ex)
        {
            _errorMessage = $"Unknown error: {ex.Message}";
            _abiturientsByAge = null;
        }
    }

    private async Task LoadTopRatedAbiturients()
    {
        try
        {
            _topRatedAbiturients = await ApiClient.TopratedAsync(_topCount);
            _errorMessage = null;
        }
        catch (ApiException ex)
        {
            _errorMessage = $"Failed to load top-rated _abiturients: {ex.Message}";
            _topRatedAbiturients = null;
        }
        catch (Exception ex)
        {
            _errorMessage = $"Unknown error: {ex.Message}";
            _topRatedAbiturients = null;
        }
    }

    private async Task LoadMaxRatedAbiturientsWithFavoriteSpecialities()
    {
        try
        {
            _maxRatedAbiturients = await ApiClient.MaxratedfavoritespecialityAsync();
            _errorMessage = null;
        }
        catch (ApiException ex)
        {
            _errorMessage = $"Failed to load max-rated _abiturients: {ex.Message}";
            _maxRatedAbiturients = null;
        }
        catch (Exception ex)
        {
            _errorMessage = $"Unknown error: {ex.Message}";
            _maxRatedAbiturients = null;
        }
    }

    private async Task LoadAbiturientsBySpeciality()
    {
        try
        {
            _abiturientsBySpeciality = await ApiClient.SpecialityAsync(_specialityId);
            _errorMessage = null;
        }
        catch (ApiException ex)
        {
            _errorMessage = $"Failed to load _abiturients by speciality ID {_specialityId}: {ex.Message}";
            _abiturientsBySpeciality = null;
        }
        catch (Exception ex)
        {
            _errorMessage = $"Unknown error: {ex.Message}";
            _abiturientsBySpeciality = null;
        }
    }

    private async Task LoadFirstPrioritySpecialityCount()
    {
        try
        {
            _firstPrioritySpecialityCounts = await ApiClient.FirstpriorityAsync();
            _errorMessage = null;
        }
        catch (ApiException ex)
        {
            _errorMessage = $"Failed to load speciality count as first priority: {ex.Message}";
            _firstPrioritySpecialityCounts = null;
        }
        catch (Exception ex)
        {
            _errorMessage = $"Unknown error: {ex.Message}";
            _firstPrioritySpecialityCounts = null;
        }
    }
}
